import logging
import random
import re
import asyncio
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

TOKEN = "7556122464:AAH-QF7sv6rt6u10X3CYKq1Y6OAHI02Uj9g"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä üé≤\n–í –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç 0 –¥–æ 100)",
        reply_markup=ReplyKeyboardRemove()
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text.lower() == "—Å—Ç–∞—Ä—Ç":
        await start(update, context)

    elif text == "–ù–æ–≤–æ–µ —á–∏—Å–ª–æ –≤ —Ç–æ–º –∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–µ":
        last_range = context.user_data.get("last_range")
        if last_range:
            number = random.randint(last_range[0], last_range[1])
            await send_number_with_buttons(update, context, number)
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω.")

    elif text == "–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω":
        await update.message.reply_text("–•–æ—Ä–æ—à–æ! –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç 10 –¥–æ 500):")

    elif text == "–ö–æ–Ω–µ—Ü":
        await update.message.reply_text(
            "–†–∞–¥ –±—ã–ª –≤–∞–º –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–°—Ç–∞—Ä—Ç")]], resize_keyboard=True)
        )

    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
        min_val, max_val = parse_range(text)

        if min_val is not None and max_val is not None:
            if min_val > max_val:
                min_val, max_val = max_val, min_val
            if abs(max_val - min_val) > 1_000_000:
                await update.message.reply_text("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –µ–≥–æ –¥–æ –º–∏–ª–ª–∏–æ–Ω–∞.")
                return

            number = random.randint(min_val, max_val)
            context.user_data["last_range"] = (min_val, max_val)
            await send_number_with_buttons(update, context, number)

        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: –æ—Ç 0 –¥–æ 100, 0-100 ."
            )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∏—Å–ª–∞ –∏ –∫–Ω–æ–ø–æ–∫
async def send_number_with_buttons(update, context, number):
    keyboard = [
        [KeyboardButton("–ù–æ–≤–æ–µ —á–∏—Å–ª–æ –≤ —Ç–æ–º –∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–µ")],
        [KeyboardButton("–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")],
        [KeyboardButton("–ö–æ–Ω–µ—Ü")]
    ]
    await update.message.reply_text(
        f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {number}",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
def parse_range(text):
    text = text.lower().strip()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.search(r"(\d+)\s*(?:–¥–æ|-|‚Äì|‚Äî|–ø–æ)\s*(\d+)", text)
    if match:
        return int(match.group(1)), int(match.group(2))

    return None, None

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ PyCharm
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.get_event_loop().run_until_complete(main())
